////
//// Some unit testing for package mmm.js
////

// Correct environment, ready testing.
var bbop = require('bbop').bbop;
var mr_t = new bbop.test();

///
/// Start unit testing.
///

// bbop.rest.response.mmm
// Artificial responses to play with.

(function(){
     var robj = null;
     var r = new bbop.rest.response.mmm(robj);
     var desc = 'null 1';
     mr_t.is_false(r.okay(), desc + 'a');
     mr_t.is_same_atom(r.message_type(), 'error', desc + 'b');
 })();

(function(){
     var robj = {
	 "message_type": "success",
	 "message": "generates ..."
     };
     var r = new bbop.rest.response.mmm(robj);
     var desc = 'simple obj 2';
     mr_t.is_true(r.okay(), desc + 'a');
     mr_t.is_same_atom(r.message_type(), 'success', desc + 'b');
 })();

(function(){
     var robj = '{"message_type": "success","message": "generates ..."}';
     var r = new bbop.rest.response.mmm(robj);
     var desc = 'simple obj as string 3';
     mr_t.is_true(r.okay(), desc + 'a');
     mr_t.is_same_atom(r.message_type(), 'success', desc + 'b');
 })();

(function(){
     var robj = {
	 "message_type": "success",
	 "message": "generates ...",
	 "data": "foo"
     };
     var r = new bbop.rest.response.mmm(robj);
     var desc = 'badly made obj 4';
     mr_t.is_false(r.okay(), desc + 'a');
     mr_t.is_same_atom(r.message_type(), 'error', desc + 'b');
 })();

(function(){
     var robj = {
	 "message_type": "success",
	 "message": "generates ...",
	 "data": {"foo": 1}
     };
     var r = new bbop.rest.response.mmm(robj);
     var desc = 'well made complete obj 5';
     mr_t.is_true(r.okay(), desc + 'a');
     mr_t.is_same_atom(r.message_type(), 'success', desc + 'b');
     mr_t.is_same_atom(r.commentary(), null, desc + 'c');
     mr_t.is_same_atom(r.data()['foo'], 1, desc + 'd');
 })();

///
/// End unit testing.
///

// Final report.
mr_t.report();
